#!/usr/bin/env python

import sys
import argparse
import httplib2
from time import sleep;
from datetime import timedelta, datetime

DEFAULT_REQUEST_PERIOD_SECONDS = 1
DEFAULT_TOTAL_TIMEOUT_SECONDS = 600
URL = "http://localhost:50130/service-name"

def parse_arguments():
  parser = argparse.ArgumentParser(description='Block until 200')
  parser.add_argument('-t', '--timeout', dest='timeout',
                      type=int, default=DEFAULT_TOTAL_TIMEOUT_SECONDS,
                      help='Time out script after x seconds')
  parser.add_argument('-p', '--period', dest='period',
                      type=int, default=DEFAULT_REQUEST_PERIOD_SECONDS,
                      help='Request period in seconds')
  parser.add_argument('-u', '--url', dest='url',
                      default=URL, help='URL to query')
  return parser

def block_until_200(timeout, period, url):
  return_code = 1
  no_iterations = timeout/period

  for i in xrange(0,no_iterations):
    httpconnection = httplib2.Http(disable_ssl_certificate_validation=True)
    httpconnection.force_exception_to_status_code = True
    response, content = httpconnection.request(url, "GET")
    if response.status == 200:
      return_code = 0
      break
    sleep(period)

  return return_code

def main():
  arg_parser = parse_arguments()
  args = arg_parser.parse_args()
  error_code = block_until_200(args.timeout, args.period, args.url)

  if error_code == 0:
    exit(0)
  else:
    print "{url} was tried for {seconds} seconds but never returned 200!".format(url=args.url, seconds=args.timeout)
    print "(per-request timeout was {timeout} seconds)".format(timeout=args.period)
    exit(1)

if __name__ == "__main__":
  main()
